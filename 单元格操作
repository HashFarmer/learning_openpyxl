
4.基本操作-访问单元格
使openpyxl访问单元格很简单，分单个单元格访问和多个单元格的访问。我们接着来学习：访问单元格的方式一般也有两种做法：假设现在我们要访问单个单元格A1，我们可以这样：

cell_1 = ws2['A1']cell_2 = ws2.cell(row=1, column=1)
如果要取得这个单元格的内容，只需要在结尾加上value属性就可以了：

value_1 = ws2['A1'].value
value_2 = ws2.cell(row=1, column=1).value
如果需要给单元格进行设置值，则可以这样实现，比如给单元格A1设置内容：

ws2['A1'].value = 'python知识学堂'
ws2.cell(row=1, column=1).value ='python知识学堂'


对于多个单元格的设置就要借助for循环了。注意，设置后要保存工作簿，否则没有效果。

多个单元格的获取一般需要用到列表切片的知识或者使用for循环来进行:

# 访问A1至C3范围单元格
cell_range = ws2['A1':'C3']
# 访问A列所有存在数据的单元格
colA = ws2['A']
# 访问A列到C列所有存在数据的单元格
col_range = ws2['A:C']
# 访问第1行所有存在数据的单元格
row1 = ws2[1]
# 访问第1行至第5行所有存在数据的单元格
row_range = ws2[1:5]


注意，上述cell_range等对象都是<class 'tuple'>类型的。如果先获取这些单元格中的值，我们可以这样：

for each_cell in cell_range:
    for each in each_cell:
     print(each.value)

for each_cell in colA:
    print(each_cell.value)
至于为什么获取cell_range和colA的for循序的次数不一样，这个问题就留给大家自己了。



for循环的方式访问多个单元格可以这样：

for row in ws2.iter_rows(min_row=1, max_col=2, max_row=2):
    for cell in row:
        print(cell)
#输出：
<Cell 'mytest'.A1>
<Cell 'mytest'.B1>
<Cell 'mytest'.A2>
<Cell 'mytest'.B2>

for col in ws2.iter_cols(min_row=1, max_col=2, max_row=2):
         for cell in col:
             print(cell)
#输出：
<Cell 'mytest'.A1>
<Cell 'mytest'.A2>
<Cell 'mytest'.B1>
<Cell 'mytest'.B2>


这两个方法是按行优先和列优先的顺序进行访问单元格的。

大家可以新建一个工作簿，然后在工作簿中写入一些数据，之后运行以下代码看看打印一些什么：

print(tuple(ws2.rows))
print(tuple(ws2.columns))
注意：ws2.rows和ws2.columns是generator对象，因此需要使用tuple进行“解析”下。
